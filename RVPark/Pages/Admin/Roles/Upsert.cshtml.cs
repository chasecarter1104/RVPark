using ApplicationCore.Interfaces;
using ApplicationCore.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Infrastructure.Data;
using Microsoft.AspNetCore.Identity;
namespace RVPark.Pages.Admin.Roles
{
    public class UpsertModel : PageModel
    {
        private readonly UnitOfWork _unitOfWork;
        private readonly RoleManager<IdentityRole> _roleManager;

        [BindProperty]
        public Role RoleObj { get; set; }

        public IEnumerable<SelectListItem> RoleObjList { get; set; }

        public UpsertModel(UnitOfWork unitOfWork, RoleManager<IdentityRole> roleManager)
        {
            _unitOfWork = unitOfWork;
            _roleManager = roleManager;
        }

        public void OnGet(string? id)
        {
            if (!string.IsNullOrEmpty(id)) // edit version
            {
                RoleObj = _unitOfWork.Role.Get(u => u.Id == id) ?? new Role();
            }
            else
            {
                RoleObj = new Role();
            }
        }
     
       
public async Task<IActionResult> OnPostAsync()
        {
            // Debug check
            Console.WriteLine("OnPostAsync called");
            Console.WriteLine($"Model valid: {ModelState.IsValid}");
            Console.WriteLine($"Role ID: {RoleObj.Id ?? "NULL"}");
            Console.WriteLine($"Role Name: {RoleObj.Name}");

            if (!ModelState.IsValid)
            {
                return Page();
            }

            if (string.IsNullOrEmpty(RoleObj.Id)) // if new
            {
                try
                {
                    // Create the IdentityRole first
                    Console.WriteLine("Creating new role");
                    var identityRole = new IdentityRole(RoleObj.Name);
                    var result = await _roleManager.CreateAsync(identityRole);

                    if (result.Succeeded)
                    {
                        // Use the ID generated by ASP.NET Identity
                        RoleObj.Id = identityRole.Id;
                        RoleObj.Name = identityRole.Name;
                        RoleObj.NormalizedName = identityRole.NormalizedName;
                        RoleObj.ConcurrencyStamp = identityRole.ConcurrencyStamp;

                        Console.WriteLine($"IdentityRole created with ID: {identityRole.Id}");

                        // Now add your extended Role
                        _unitOfWork.Role.Add(RoleObj);
                        _unitOfWork.Commit();

                        Console.WriteLine("Role added and committed");
                        return RedirectToPage("./Index", new { success = true, message = "Role created successfully" });
                    }
                    else
                    {
                        foreach (var error in result.Errors)
                        {
                            Console.WriteLine($"Error: {error.Description}");
                            ModelState.AddModelError("", error.Description);
                        }
                        return Page();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception: {ex.Message}");
                    ModelState.AddModelError("", $"Error creating role: {ex.Message}");
                    return Page();
                }
            }
            else // existing
            {
                // Get fresh entity from database
                var existingRole = _unitOfWork.Role.Get(u => u.Id == RoleObj.Id);
                if (existingRole != null)
                {
                    // Update properties individually
                    existingRole.Name = RoleObj.Name;
                    existingRole.Description = RoleObj.Description;

                    // Update the IdentityRole
                    var identityRole = await _roleManager.FindByIdAsync(RoleObj.Id);
                    if (identityRole != null)
                    {
                        identityRole.Name = RoleObj.Name;
                        var roleResult = await _roleManager.UpdateAsync(identityRole);

                        if (roleResult.Succeeded)
                        {
                            // Update your extended Role
                            _unitOfWork.Role.Update(existingRole);
                            _unitOfWork.Commit();

                            return RedirectToPage("./Index");
                        }
                        else
                        {
                            foreach (var error in roleResult.Errors)
                            {
                                ModelState.AddModelError("", error.Description);
                            }
                            return Page();
                        }
                    }
                    else
                    {
                        ModelState.AddModelError("", "Identity Role not found");
                        return Page();
                    }
                }
                else
                {
                    ModelState.AddModelError("", "Role not found");
                    return Page();
                }
            }
        }
    }
}